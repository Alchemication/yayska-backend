# Coding Standards
- Adhere to ruff guidelines for all Python code to ensure consistency.
- Prefer standard library modules over external packages when feasible.
- Use type hints for all function parameters and return values.
- Maintain docstrings following Google style format.
- Use native types instead of Typing package if possible.

# Package Management
- Utilize 'uv' for managing project dependencies (use `uv add <package>` to add a new dependency).
- Keep pyproject.toml up to date.
- Pin dependency versions for reproducible builds.

# Database Interaction
- Name database tables in plural form when possible.
- Use SQLAlchemy's declarative base for model definitions.
- Include database indexes for frequently queried fields.
- When adding a new table:
    - Ensure primary key field `id` is auto incrementing.
- Migrations are created in the alembic folder.

# Testing Guidelines
- Develop integration tests without mocking objects.
- Use real databases and services for testing purposes.
- Use pytest as the testing framework.

# Security
- Store sensitive configuration in environment variables.
- Use parameterized queries to prevent SQL injection.
- Implement proper input validation.
